{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Glorison Lai\\\\Documents\\\\GitHub\\\\weatherapp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\Glorison Lai\\\\Documents\\\\GitHub\\\\weatherapp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";var fetch=require('node-fetch');var Services={prepareBody:function prepareBody(data){return JSON.stringify(data);},prepareUrl:function prepareUrl(path){console.log(window.location.host);return window.location.host+path;},post:function post(url,body){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(url,{method:'POST',body:body,headers:{'Content-Type':'application/json'}});case 2:response=_context.sent;_context.next=5;return response.text();case 5:return _context.abrupt(\"return\",_context.sent);case 6:case\"end\":return _context.stop();}}},_callee);}))();},getWeather:function getWeather(data){var _this=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var path,url,body;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:path='/open-weather';url=_this.prepareUrl(path);body=_this.prepareBody(data);_context2.t0=JSON;_context2.next=6;return _this.post(url,body);case 6:_context2.t1=_context2.sent;return _context2.abrupt(\"return\",_context2.t0.parse.call(_context2.t0,_context2.t1));case 8:case\"end\":return _context2.stop();}}},_callee2);}))();},getCities:function getCities(data){var _this2=this;return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var path,url,body;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:path='/get-cities';url=_this2.prepareUrl(path);body=_this2.prepareBody(data);_context3.t0=JSON;_context3.next=6;return _this2.post(url,body);case 6:_context3.t1=_context3.sent;return _context3.abrupt(\"return\",_context3.t0.parse.call(_context3.t0,_context3.t1));case 8:case\"end\":return _context3.stop();}}},_callee3);}))();}};export default Services;","map":{"version":3,"sources":["C:/Users/Glorison Lai/Documents/GitHub/weatherapp/client/src/services/services.js"],"names":["fetch","require","Services","prepareBody","data","JSON","stringify","prepareUrl","path","console","log","window","location","host","post","url","body","method","headers","response","text","getWeather","parse","getCities"],"mappings":"iXAAA,GAAMA,CAAAA,KAAK,CAAGC,OAAO,CAAC,YAAD,CAArB,CAEA,GAAMC,CAAAA,QAAQ,CAAG,CACfC,WADe,sBACHC,IADG,CACG,CAChB,MAAOC,CAAAA,IAAI,CAACC,SAAL,CAAeF,IAAf,CAAP,CACD,CAHc,CAKfG,UALe,qBAKJC,IALI,CAKE,CACfC,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,QAAP,CAAgBC,IAA5B,EACA,MAAOF,CAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAuBL,IAA9B,CACD,CARc,CAUTM,IAVS,eAUJC,GAVI,CAUCC,IAVD,CAUO,sOACGhB,CAAAA,KAAK,CAACe,GAAD,CAAM,CAChCE,MAAM,CAAE,MADwB,CAEhCD,IAAI,CAAEA,IAF0B,CAGhCE,OAAO,CAAE,CAAC,eAAgB,kBAAjB,CAHuB,CAAN,CADR,QACdC,QADc,qCAOPA,CAAAA,QAAQ,CAACC,IAAT,EAPO,kHAQrB,CAlBc,CAoBTC,UApBS,qBAoBEjB,IApBF,CAoBQ,yOACfI,IADe,CACR,eADQ,CAEfO,GAFe,CAET,KAAI,CAACR,UAAL,CAAgBC,IAAhB,CAFS,CAGfQ,IAHe,CAGR,KAAI,CAACb,WAAL,CAAiBC,IAAjB,CAHQ,cAKdC,IALc,wBAKG,CAAA,KAAI,CAACS,IAAL,CAAUC,GAAV,CAAeC,IAAf,CALH,kFAKTM,KALS,+FAMtB,CA1Bc,CA4BTC,SA5BS,oBA4BCnB,IA5BD,CA4BO,0OACdI,IADc,CACT,aADS,CAEdO,GAFc,CAER,MAAI,CAACR,UAAL,CAAgBC,IAAhB,CAFQ,CAGdQ,IAHc,CAGP,MAAI,CAACb,WAAL,CAAiBC,IAAjB,CAHO,cAKbC,IALa,wBAKI,CAAA,MAAI,CAACS,IAAL,CAAUC,GAAV,CAAeC,IAAf,CALJ,kFAKRM,KALQ,+FAMrB,CAlCc,CAAjB,CAqCA,cAAepB,CAAAA,QAAf","sourcesContent":["const fetch = require('node-fetch');\r\n\r\nconst Services = {\r\n  prepareBody(data) {\r\n    return JSON.stringify(data);\r\n  },\r\n\r\n  prepareUrl(path) {\r\n    console.log(window.location.host);\r\n    return window.location.host + path;\r\n  },\r\n\r\n  async post(url, body) {\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      body: body,\r\n      headers: {'Content-Type': 'application/json'},\r\n    });\r\n  \r\n    return await response.text();\r\n  },\r\n\r\n  async getWeather(data) {\r\n    const path = '/open-weather';\r\n    const url = this.prepareUrl(path);\r\n    const body = this.prepareBody(data);\r\n\r\n    return JSON.parse(await this.post(url, body));\r\n  },\r\n\r\n  async getCities(data) {\r\n    const path='/get-cities';\r\n    const url = this.prepareUrl(path);\r\n    const body = this.prepareBody(data);\r\n\r\n    return JSON.parse(await this.post(url, body));\r\n  }\r\n};\r\n\r\nexport default Services;"]},"metadata":{},"sourceType":"module"}