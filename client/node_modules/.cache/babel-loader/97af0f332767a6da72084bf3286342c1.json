{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\Glorison Lai\\\\Documents\\\\GitHub\\\\weatherapp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"C:\\\\Users\\\\Glorison Lai\\\\Documents\\\\GitHub\\\\weatherapp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\Glorison Lai\\\\Documents\\\\GitHub\\\\weatherapp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\Glorison Lai\\\\Documents\\\\GitHub\\\\weatherapp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{Autocomplete}from'@material-ui/lab';import{TextField,CircularProgress}from'@material-ui/core';import{Services}from'../../../services/services';var CitySearcher=function CitySearcher(_ref){var onSubmit=_ref.onSubmit,_onBlur=_ref.onBlur,initVal=_ref.initVal;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),loading=_useState2[0],setLoading=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),value=_useState4[0],setValue=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),id=_useState6[0],setId=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),cities=_useState8[0],setCities=_useState8[1];useEffect(function(){if(!loading)return;var getData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return Services.getWeather({locId:id});case 2:return _context.abrupt(\"return\",_context.sent);case 3:case\"end\":return _context.stop();}}},_callee);}));return function getData(){return _ref2.apply(this,arguments);};}();onSubmit(getData());setLoading(false);},[loading,id]);useEffect(function(){console.log(value);if(value.length<2)return;var getCities=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.t0=setCities;_context2.next=3;return Services.getCities({query:value});case 3:_context2.t1=_context2.sent;(0,_context2.t0)(_context2.t1);case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function getCities(){return _ref3.apply(this,arguments);};}();getCities();setCities([]);},[value]);function createLabel(_ref4){var name=_ref4.name,country=_ref4.country;return\"\".concat(name,\", \").concat(country);}var setLocation=function setLocation(newId){setId(newId);setLoading(true);};console.log(cities);return/*#__PURE__*/React.createElement(\"div\",{className:\"card search-card\"},/*#__PURE__*/React.createElement(Autocomplete,{options:cities,getOptionLabel:function getOptionLabel(option){return createLabel(option);},autoHighlight:true,style:{width:'100%'},loading:loading,renderInput:function renderInput(params){return/*#__PURE__*/React.createElement(TextField,Object.assign({},params,{value:value,autoFocus:true,onBlur:function onBlur(){return _onBlur();},style:{width:'90%',paddingTop:'1rem'},placeholder:\"Enter city name...\",onChange:function onChange(event){return setValue(event.target.value);},InputProps:_objectSpread(_objectSpread({},params.InputProps),{},{endAdornment:/*#__PURE__*/React.createElement(React.Fragment,null,loading?/*#__PURE__*/React.createElement(CircularProgress,{color:\"inherit\",size:20}):null,params.InputProps.endAdornment)})}));},onChange:function onChange(e,value){return!!value?setLocation(value.id):null;}}));};export default CitySearcher;","map":{"version":3,"sources":["C:/Users/Glorison Lai/Documents/GitHub/weatherapp/client/src/components/util/card/city-searcher.jsx"],"names":["React","useState","useEffect","Autocomplete","TextField","CircularProgress","Services","CitySearcher","onSubmit","onBlur","initVal","loading","setLoading","value","setValue","id","setId","cities","setCities","getData","getWeather","locId","console","log","length","getCities","query","createLabel","name","country","setLocation","newId","option","width","params","paddingTop","event","target","InputProps","endAdornment","e"],"mappings":"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","sourcesContent":["import React, {useState, useEffect } from 'react';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport { TextField, CircularProgress } from '@material-ui/core';\r\nimport { Services } from '../../../services/services';\r\n\r\nconst CitySearcher = ({onSubmit, onBlur, initVal}) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [value, setValue] = useState('');\r\n  const [id, setId] = useState(0);\r\n  const [cities, setCities] = useState([]);\r\n\r\n  useEffect(() =>  {\r\n    if (!loading) return; \r\n\r\n    const getData = async() => {\r\n      return await Services.getWeather({locId: id});\r\n    };\r\n\r\n    onSubmit(getData());\r\n    setLoading(false);\r\n    \r\n  }, [loading, id]);\r\n\r\n  useEffect(() => {\r\n    console.log(value);\r\n    if (value.length < 2) return;\r\n\r\n    const getCities = async() => {\r\n      setCities(await Services.getCities({query: value}));\r\n    }\r\n\r\n    getCities();\r\n    setCities([]);\r\n  }, [value])\r\n\r\n  function createLabel({name, country}) {\r\n    return `${name}, ${country}`;\r\n  }\r\n\r\n  const setLocation = (newId) => {\r\n    setId(newId);\r\n    setLoading(true);\r\n  }\r\n\r\n  console.log(cities);\r\n\r\n  return (\r\n    <div className=\"card search-card\">\r\n      <Autocomplete\r\n        options={cities}\r\n        getOptionLabel={(option) => createLabel(option)}\r\n        autoHighlight\r\n        style={{ width: '100%' }}\r\n        loading={loading}\r\n        renderInput={(params) => \r\n          <TextField \r\n            {...params}\r\n            value={value}\r\n            autoFocus={true}\r\n            onBlur={() => onBlur()}\r\n            style={ { width: '90%', paddingTop: '1rem'}}\r\n            placeholder=\"Enter city name...\"\r\n            onChange={(event) => setValue(event.target.value)}\r\n            InputProps={{\r\n              ...params.InputProps,\r\n              endAdornment: (\r\n                <React.Fragment>\r\n                  {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                  {params.InputProps.endAdornment}\r\n                </React.Fragment>\r\n              )\r\n            }}\r\n          />\r\n        }\r\n        onChange={(e, value) => !!value ? setLocation(value.id) : null}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CitySearcher;"]},"metadata":{},"sourceType":"module"}