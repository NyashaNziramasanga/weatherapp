{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Glorison Lai\\\\Documents\\\\GitHub\\\\weatherapp\\\\client\\\\src\\\\components\\\\util\\\\card\\\\city-searcher.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Autocomplete } from '@material-ui/lab';\nimport { TextField, CircularProgress } from '@material-ui/core';\nimport Services from '../../../services/services';\n\nconst CitySearcher = ({\n  onSubmit,\n  onBlur\n}) => {\n  const [loading, setLoading] = useState(false);\n  let value = '';\n  useEffect(() => {\n    if (!loading || value == '') return;\n\n    (async () => {\n      const response = await Services.getWeather(value);\n    })();\n\n    setLoading(false);\n  });\n  const cities = [{\n    name: 'Melbourne',\n    country: 'AU',\n    id: 2158177\n  }, {\n    name: 'Melbourne',\n    country: 'US',\n    id: 4163971\n  }, {\n    name: 'Sydney',\n    country: 'AU',\n    id: 2147714\n  }, {\n    name: 'Toronto',\n    country: 'CA',\n    id: 6167865\n  }];\n\n  function createLabel({\n    name,\n    state,\n    country\n  }) {\n    return `${name}, ${country}`;\n  }\n\n  const setLocation = id => {\n    value = id;\n    setLoading(true);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card weather-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    options: cities,\n    getOptionLabel: option => createLabel(option),\n    autoHighlight: true,\n    style: {\n      width: '100%'\n    },\n    loading: loading,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      value: value,\n      autoFocus: true // onBlur={() => setActive(false)}\n      ,\n      style: {\n        width: '90%',\n        paddingTop: '1rem'\n      },\n      placeholder: \"Enter city name...\",\n      onChange: event => setValue(event.target.value),\n      InputProps: { ...params.InputProps,\n        endAdornment: /*#__PURE__*/React.createElement(React.Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }\n        }, loading ? /*#__PURE__*/React.createElement(CircularProgress, {\n          color: \"inherit\",\n          size: 20,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 30\n          }\n        }) : null, params.InputProps.endAdornment)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    })),\n    onChange: (e, value) => setLocation(value.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default CitySearcher;","map":{"version":3,"sources":["C:/Users/Glorison Lai/Documents/GitHub/weatherapp/client/src/components/util/card/city-searcher.jsx"],"names":["React","useState","useEffect","Autocomplete","TextField","CircularProgress","Services","CitySearcher","onSubmit","onBlur","loading","setLoading","value","response","getWeather","cities","name","country","id","createLabel","state","setLocation","option","width","params","paddingTop","event","setValue","target","InputProps","endAdornment","e"],"mappings":"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","sourcesContent":["import React, {useState, useEffect } from 'react';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport { TextField, CircularProgress } from '@material-ui/core';\r\nimport Services from '../../../services/services';\r\n\r\nconst CitySearcher = ({onSubmit, onBlur}) => {\r\n  const [loading, setLoading] = useState(false);\r\n  let value = '';\r\n\r\n  useEffect(() =>  {\r\n    if (!loading || value=='') return; \r\n\r\n    (async () => {\r\n      const response = await Services.getWeather(value);\r\n\r\n    })();\r\n\r\n    setLoading(false);\r\n  });\r\n\r\n  const cities=[\r\n    { name: 'Melbourne',\r\n      country: 'AU',\r\n      id: 2158177,\r\n    },\r\n    { \r\n      name: 'Melbourne',\r\n      country: 'US',\r\n      id: 4163971,\r\n    },\r\n    {\r\n      name: 'Sydney',\r\n      country: 'AU',\r\n      id: 2147714,\r\n    },\r\n    {\r\n      name: 'Toronto',\r\n      country: 'CA',\r\n      id: 6167865,\r\n    },\r\n  ]\r\n\r\n  function createLabel({name, state, country}) {\r\n    return `${name}, ${country}`;\r\n  }\r\n\r\n  const setLocation = (id) => {\r\n    value = id;\r\n    setLoading(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"card weather-card\">\r\n      <Autocomplete\r\n        options={cities}\r\n        getOptionLabel={(option) => createLabel(option)}\r\n        autoHighlight\r\n        style={{ width: '100%' }}\r\n        loading={loading}\r\n        renderInput={(params) => \r\n          <TextField \r\n            {...params}\r\n            value={value}\r\n            autoFocus={true}\r\n            // onBlur={() => setActive(false)}\r\n            style={ { width: '90%', paddingTop: '1rem'}}\r\n            placeholder=\"Enter city name...\"\r\n            onChange={(event) => setValue(event.target.value)}\r\n            InputProps={{\r\n              ...params.InputProps,\r\n              endAdornment: (\r\n                <React.Fragment>\r\n                  {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                  {params.InputProps.endAdornment}\r\n                </React.Fragment>\r\n              )\r\n            }}\r\n          />\r\n        }\r\n        onChange={(e, value) => setLocation(value.id)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CitySearcher;"]},"metadata":{},"sourceType":"module"}